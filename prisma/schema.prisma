// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id            String        @id @default(uuid())
  name          String
  userId        String
  billboards    Billboard[]   @relation("StoreToBillboard")
  categories    Category[]
  subcategories Subcategory[]
  products      Product[]     @relation("StoreToProduct")
  orders        Order[]       @relation("StoreToOrder")
  productTypes  ProductType[] @relation("StoreToProductType")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Billboard {
  id            String        @id @default(uuid())
  storeId       String
  store         Store         @relation("StoreToBillboard", fields: [storeId], references: [id])
  label         String
  imageUrl      String
  categories    Category[]
  subcategories Subcategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([storeId])
}

model Category {
  id            String        @id @default(uuid())
  storeId       String
  store         Store         @relation(fields: [storeId], references: [id])
  billboardId   String
  billboard     Billboard     @relation(fields: [billboardId], references: [id])
  name          String
  subcategories Subcategory[] @relation("CategoryToSubcategory")
  products      Product[]     @relation("CategoryToProduct")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Subcategory {
  id          String    @id @default(uuid())
  name        String
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  categoryId  String
  category    Category  @relation("CategoryToSubcategory", fields: [categoryId], references: [id])
  products    Product[] @relation("SubcategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
  @@index([categoryId])
}

model ProductType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String
  store     Store    @relation("StoreToProductType", fields: [storeId], references: [id])

  products Product[] @relation("ProductTypeToProduct")
}

model Product {
  id            String      @id @default(uuid())
  storeId       String
  store         Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId    String // Add this line
  category      Category    @relation("CategoryToProduct", fields: [categoryId], references: [id]) // Add this line
  subcategoryId String
  subcategory   Subcategory @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  productTypeId String
  productType   ProductType @relation("ProductTypeToProduct", fields: [productTypeId], references: [id])
  name          String
  price         Decimal
  isFeatured    Boolean     @default(false)
  isArchived    Boolean     @default(false)
  images        Image[]
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId]) // Add this line
  @@index([subcategoryId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
